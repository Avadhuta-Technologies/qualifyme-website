---
import Layout from '../layouts/Layout.astro';
import Container from '../components/Container.astro';
import countryCodes from '../utils/country-codes.json';
---

<Layout title="Contact Us - QualifyMe">
  <main class="space-y-40 mb-40">
    {/* Hero Section */}
    <section class="pt-40 py-20">
      <Container>
        <div class="text-center">
          <h1 class="text-4xl font-bold text-gray-800 md:text-5xl lg:text-6xl dark:text-white mb-6">
            Get in Touch
          </h1>
          <p class="text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-3xl mx-auto">
            Have questions about QualifyMe? We'd love to hear from you. Our team is here to help you transform your hiring process with AI-powered solutions.
          </p>
          <div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
            <div class="flex items-center gap-2 text-gray-600 dark:text-gray-300">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
              </svg>
              <span>support@qualifyme.ai</span>
            </div>
            <div class="flex items-center gap-2 text-gray-600 dark:text-gray-300">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span>Response within 24 hours</span>
            </div>
          </div>
        </div>
      </Container>
    </section>

    {/* Contact Section */}
    <section class="py-20">
      <Container>
        <div class="flex flex-col lg:flex-row gap-12">
          {/* Contact Information */}
          <div class="w-full lg:w-1/2">
            <div class="mb-8">
              <h2 class="text-3xl font-bold text-gray-800 dark:text-white mb-4">Let's Start a Conversation</h2>
              <p class="text-gray-600 dark:text-gray-300 text-lg">Whether you have questions about our features, need help with implementation, or want to discuss pricing, we're here to help you succeed.</p>
            </div>
            
            <div class="space-y-6">
              <div class="flex items-center gap-4">
                <div class="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                </div>
                <div>
                  <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Email</h3>
                  <p class="text-gray-600 dark:text-gray-300">support@qualifyme.ai</p>
                </div>
              </div>
              
              <div class="flex items-center gap-4">
                <div class="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                </div>
                <div>
                  <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Location</h3>
                  <p class="text-gray-600 dark:text-gray-300">Remote-first company</p>
                </div>
              </div>
              
              <div class="flex items-center gap-4">
                <div class="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div>
                  <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Response Time</h3>
                  <p class="text-gray-600 dark:text-gray-300">Within 24 hours</p>
                </div>
              </div>
            </div>
          </div>
          
          {/* Contact Form */}
          <div class="w-full lg:w-1/2">
            <div class="bg-white dark:bg-gray-800 rounded-3xl shadow-xl p-8 border border-gray-100 dark:border-gray-700">
              <h2 class="text-2xl font-bold text-gray-800 dark:text-white mb-6">Send us a Message</h2>
              
              <form id="contactForm" class="space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Name *</label>
                    <input type="text" id="name" name="name" required class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent">
                  </div>
                  <div>
                    <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Email *</label>
                    <input type="email" id="email" name="email" required class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent">
                  </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div class="md:col-span-1 relative">
                    <label for="countryCodeInput" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Country Code</label>
                    <div class="relative">
                      <input 
                        type="text" 
                        id="countryCodeInput" 
                        placeholder="Search country..." 
                        class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent"
                        autocomplete="off"
                      >
                      <input type="hidden" id="countryCode" name="countryCode">
                      <div id="countryDropdown" class="hidden absolute z-50 w-full mt-1 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg shadow-lg max-h-60 overflow-y-auto">
                      </div>
                    </div>
                  </div>
                  <div class="md:col-span-2">
                    <label for="phone" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Phone Number (Optional)</label>
                    <input type="tel" id="phone" name="phone" class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="Enter phone number">
                  </div>
                </div>
                
                <div>
                  <label for="subject" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Subject *</label>
                  <input type="text" id="subject" name="subject" required class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent">
                </div>
                
                <div>
                  <label for="message" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Message *</label>
                  <textarea id="message" name="message" rows="6" required class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent resize-none"></textarea>
                </div>
                
                <button type="submit" class="w-full bg-primary text-white font-semibold py-3 px-6 rounded-lg hover:bg-primary/90 transition duration-300 focus:ring-2 focus:ring-primary focus:ring-offset-2">
                  Send Message
                </button>
              </form>
              
              <div id="formSuccess" class="hidden mt-4 p-4 bg-green-100 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
                <p class="text-green-800 dark:text-green-200">Thank you! Your message has been sent successfully.</p>
              </div>
              
              <div id="formError" class="hidden mt-4 p-4 bg-red-100 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
                <p class="text-red-800 dark:text-red-200">Sorry, there was an error sending your message. Please try again.</p>
              </div>
            </div>
          </div>
        </div>
      </Container>
    </section>
  </main>
</Layout>

<script define:vars={{ countryCodes }}>
  // Typeahead functionality
  const countryCodeInput = document.getElementById('countryCodeInput');
  const countryCodeHidden = document.getElementById('countryCode');
  const countryDropdown = document.getElementById('countryDropdown');
  
  if (countryCodeInput && countryCodeHidden && countryDropdown) {
    let selectedIndex = -1;
    
    // Show dropdown with filtered results
    function showDropdown(query) {
      console.log('Showing dropdown for query:', query);
      console.log('Available countries:', countryCodes.length);
      
      const filteredCountries = countryCodes.filter((country) => 
        country.name.toLowerCase().includes(query.toLowerCase()) ||
        country.dial_code.includes(query)
      );
      
      console.log('Filtered countries:', filteredCountries.length);
      
      if (filteredCountries.length === 0) {
        countryDropdown.classList.add('hidden');
        return;
      }
      
      countryDropdown.innerHTML = filteredCountries.map((country, index) => `
        <div class="country-option px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 cursor-pointer ${index === selectedIndex ? 'bg-gray-100 dark:bg-gray-600' : ''}" 
             data-dial-code="${country.dial_code}" 
             data-country-name="${country.name}">
          <span class="font-medium">${country.dial_code}</span>
          <span class="text-gray-600 dark:text-gray-300 ml-2">${country.name}</span>
        </div>
      `).join('');
      
      countryDropdown.classList.remove('hidden');
      selectedIndex = -1;
    }
    
    // Handle input changes
    countryCodeInput.addEventListener('input', (e) => {
      const query = e.target.value;
      console.log('Input event triggered with query:', query);
      if (query.length > 0) {
        showDropdown(query);
      } else {
        countryDropdown.classList.add('hidden');
      }
    });
    
    // Handle keyboard navigation
    countryCodeInput.addEventListener('keydown', (e) => {
      const options = countryDropdown.querySelectorAll('.country-option');
      
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        selectedIndex = Math.min(selectedIndex + 1, options.length - 1);
        updateSelection();
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        selectedIndex = Math.max(selectedIndex - 1, -1);
        updateSelection();
      } else if (e.key === 'Enter') {
        e.preventDefault();
        if (selectedIndex >= 0 && options[selectedIndex]) {
          selectCountry(options[selectedIndex]);
        }
      } else if (e.key === 'Escape') {
        countryDropdown.classList.add('hidden');
        selectedIndex = -1;
      }
    });
    
    // Handle click on dropdown options
    countryDropdown.addEventListener('click', (e) => {
      const target = e.target;
      if (target.classList.contains('country-option')) {
        selectCountry(target);
      }
    });
    
    // Update visual selection
    function updateSelection() {
      const options = countryDropdown.querySelectorAll('.country-option');
      options.forEach((option, index) => {
        if (index === selectedIndex) {
          option.classList.add('bg-gray-100', 'dark:bg-gray-600');
        } else {
          option.classList.remove('bg-gray-100', 'dark:bg-gray-600');
        }
      });
    }
    
    // Select a country
    function selectCountry(element) {
      const dialCode = element.getAttribute('data-dial-code');
      const countryName = element.getAttribute('data-country-name');
      
      if (dialCode && countryName) {
        countryCodeInput.value = `${dialCode} (${countryName})`;
        countryCodeHidden.value = dialCode;
        countryDropdown.classList.add('hidden');
        selectedIndex = -1;
      }
    }
    
    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!countryCodeInput.contains(e.target) && !countryDropdown.contains(e.target)) {
        countryDropdown.classList.add('hidden');
        selectedIndex = -1;
      }
    });
  }
  
  // Form submission
  document.getElementById('contactForm')?.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const form = this;
    const formData = new FormData(form);
    const submitButton = form.querySelector('button[type="submit"]');
    const successDiv = document.getElementById('formSuccess');
    const errorDiv = document.getElementById('formError');
    
    // Hide previous messages
    successDiv?.classList.add('hidden');
    errorDiv?.classList.add('hidden');
    
    // Disable submit button
    submitButton.disabled = true;
    submitButton.textContent = 'Sending...';
    
    // Prepare phone number with country code
    const countryCode = formData.get('countryCode');
    const phone = formData.get('phone');
    const fullPhone = countryCode && phone ? `${countryCode} ${phone}` : '';
    
    try {
      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: formData.get('name'),
          email: formData.get('email'),
          phone: fullPhone,
          subject: formData.get('subject'),
          message: formData.get('message')
        })
      });
      
      if (response.ok) {
        successDiv?.classList.remove('hidden');
        form.reset();
      } else {
        errorDiv?.classList.remove('hidden');
      }
    } catch (error) {
      errorDiv?.classList.remove('hidden');
    } finally {
      submitButton.disabled = false;
      submitButton.textContent = 'Send Message';
    }
  });
</script> 